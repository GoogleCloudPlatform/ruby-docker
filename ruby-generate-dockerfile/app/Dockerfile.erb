################################################################################
## This Dockerfile builds a Ruby application for the Google App Engine
## Flexible Environment. It may be modified and used as an App Engine "custom
## runtime", or even ported to a different Docker-based hosting environment.
##
## Generated at: <%= timestamp %>
## From configuration: <%= app_yaml_path %>
## Project: <%= project_id_for_display %>
## Service: <%= service_name %>
################################################################################


################################################################################
## 1. Augmented base image
## From a specific snapshot of the Ruby base image, installs the application's
## desired version of Ruby and any needed Debian packages. Any software needed
## by both the application's build scripts and the final application runtime
## should be installed here.

FROM <%= base_image %> AS augmented-base

## Prevent some warnings that happen when we're apt-get installing in a
## non-interactive environment.
ARG DEBIAN_FRONTEND=noninteractive

## This line is needed to perform Debian package installations. It should be
## uncommented if any of the customizations below are used to install
## additional Debian packages or a specific version of Ruby.
## If your application needs additional Debian repositories for its
## installations, you can also add them here.
<% if install_packages.empty? && ruby_version.empty? %>
# RUN apt-get update -y
<% else %>
RUN apt-get update -y
<% end %>

## If your application needs to install additional Debian packages, do so here.
<% if install_packages.empty? %>
# RUN apt-get install -y -q package-name another-package-name
<% else %>
RUN apt-get install -y -q <%= install_packages.join(' ') %>
<% end %>

## If your application requires a specific version of Ruby, provide a
## `.ruby-version` file in your application directory, and also set the
## version here. If you change the Ruby version in the future, make sure the
## `.ruby-version` file matches the setting below.
## This script attempts to install the requested Ruby version from the GCP-
## provided prebuilt binaries if available, and falls back to using rbenv.
## It sets the new version as the default, and also installs bundler.
<% if ruby_version.empty? %>
# ARG REQUESTED_RUBY_VERSION="2.4.3"
# RUN if [ ! -x ${RBENV_ROOT}/versions/${REQUESTED_RUBY_VERSION}/bin/ruby ]; \
#     then \
#       apt-get install -y -q ^gcp-ruby-${REQUESTED_RUBY_VERSION}$ \
#       || (cd ${RBENV_ROOT}/plugins/ruby-build \
#         && git pull \
#         && rbenv install -s ${REQUESTED_RUBY_VERSION}) \
#       && rbenv global ${REQUESTED_RUBY_VERSION} \
#       && (bundle version > /dev/null 2>&1 \
#         || gem install bundler --version ${BUNDLER_VERSION}); \
#     fi
<% else %>
ARG REQUESTED_RUBY_VERSION="<%= ruby_version %>"
RUN if [ ! -x ${RBENV_ROOT}/versions/${REQUESTED_RUBY_VERSION}/bin/ruby ]; \
    then \
      apt-get install -y -q ^gcp-ruby-${REQUESTED_RUBY_VERSION}$ \
      || (cd ${RBENV_ROOT}/plugins/ruby-build \
        && git pull \
        && rbenv install -s ${REQUESTED_RUBY_VERSION}) \
      && rbenv global ${REQUESTED_RUBY_VERSION} \
      && (bundle version > /dev/null 2>&1 \
        || gem install bundler --version ${BUNDLER_VERSION}); \
    fi
<% end %>

## Clean up apt-get's files to decrease the image size. It should be
## uncommented if any of the customizations above are used to install
## additional Debian packages or a specific version of Ruby.
<% if install_packages.empty? && ruby_version.empty? %>
# RUN apt-get clean && rm -f /var/lib/apt/lists/*_*
<% else %>
RUN apt-get clean && rm -f /var/lib/apt/lists/*_*
<% end %>

## Feel free to install any other software needed by both the build process
## (stage 2 below) and the final application runtime.

## Set environment variables requested in the app engine configuration.
<% if env_variables.empty? %>
# ENV NAME="value"
<% else %>
ENV <%= render_env env_variables %>
<% end %>


################################################################################
## 2. Application build
## From the augmented base image, installs any provided bundle, and runs any
## requested build jobs, such as preparation of JavaScript and CSS assets.
## This stage should prepare the /app directory exactly the way needed to run
## the final application.

FROM augmented-base AS app-build

## Obtain common build tools, including nodejs, yarn, gcloud, cloud_sql_proxy,
## and the access_cloud_sql script, from this image.
COPY --from=<%= build_tools_image %> /build_tools/ /build_tools/

## Ensure the above tools are in the PATH
ENV PATH /build_tools:/build_tools/google-cloud-sdk/bin:/build_tools/nodejs/bin:/build_tools/yarn/bin:${PATH}

## Set gcloud project here if your build scripts need to use gcloud.
<% if project_id %>
RUN gcloud config set project <%= project_id %>
<% else %>
# RUN gcloud config set project <%= project_id_for_example %>
<% end %>

## Copy the application files.
COPY . /app/

## If your build scripts need access to your application's CloudSQL instances,
## list them here, comma-delimited. This environment variable tells the
## "access_cloud_sql" script which databases to connect to.
## Also, make sure the /cloudsql directory is created because the CloudSQL
## Proxy will open sockets in that directory.
<% if cloud_sql_instances.empty? %>
# ARG BUILD_CLOUDSQL_INSTANCES="<%= project_id_for_example %>:db-region:db-name"
# RUN mkdir /cloudsql
<% else %>
ARG BUILD_CLOUDSQL_INSTANCES="<%= cloud_sql_instances.join(',') %>"
RUN mkdir /cloudsql
<% end %>

## If your build scripts need credentials for access to cloud resources, you
## may provide an appropriate JSON credentials file and set the
## GOOGLE_APPLICATION_CREDENTIALS path accordingly:
# COPY my-build-credentials.json /build_tools/credentials.json
# ENV GOOGLE_APPLICATION_CREDENTIALS=/build_tools/credentials.json

## If the application uses bundler, install the bundle here.
<% if has_gemfile? %>
RUN bundle install --deployment --without="development test" && rbenv rehash
<% else %>
# RUN bundle install --deployment --without="development test" && rbenv rehash
<% end %>

## Run application build scripts here.
## Scripts that require access to the application CloudSQL instances should
## run access_cloud_sql first to start the cloud_sql_proxy. e.g.
##   RUN access_cloud_sql && bundle exec rake my_task
## Otherwise, simply run each build script in order in a separate RUN command.
<% if build_scripts.empty? %>
<% if cloud_sql_instances.empty? %>
# RUN bundle exec rake assets:precompile
<% else %>
# RUN access_cloud_sql && bundle exec rake assets:precompile
<% end %>
<% else %>
<% build_scripts.each do |script| %>
RUN <%= script %>
<% end %>
<% end %>


################################################################################
## 3. Application image
## From the augmented base image, installs the application directory built in
## stage 2 above, and sets the entrypoint. This is the final image that is
## executed by Google App Engine.

FROM augmented-base

## Copy built application from build stage
COPY --from=app-build /app/ /app/

## Command to start application.
CMD <%= entrypoint %>
